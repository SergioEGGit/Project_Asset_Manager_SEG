//------------------------------------------------------------------------------

	#pragma hdrstop

//---------------------------------Librerias------------------------------------

	#include <iostream>
	#include <stdio.h>
	#include <conio.h>
	#include <string>
	#include <cstdlib>
	#include <fstream>
	#include "LIstaDobleCircularEstructura.h"
	#include "Interfaz.h"
	using namespace std;

//------------------------------------------------------------------------------

	#pragma package(smart_init)

//---------------------------------Métodos--------------------------------------

	//Reportes

	//Generar Reporte Lista Circular

	void ReporteListaDobleCircularT(ListaDCTrans &Lista)
	{
		//Declaraciones

		ofstream SalidaArchivo("C:\\ReportesEDD\\ReporteListaDobleCircularTransacciones.txt");
		ListaDCTrans AuxiliarListaDoble = Lista;
        int Contador = 0;
		string Temp[1000];
		string Same = "";
		string Asc = "";
		string Desc = "";

		//Comienza Reporte

		SalidaArchivo<< "digraph ListaDobleCircular" <<endl;
		SalidaArchivo<< "{" <<endl;
		SalidaArchivo<< "graph[charset=latin1]" <<endl;
		SalidaArchivo<< "node[shape = box, style = rounded, fontcolor = darkslategrey, color = firebrick1];" <<endl;

		//Recorrer Lista

		if(Lista != NULL)
		{
			do
			{
				SalidaArchivo<< "NodoLista" << Contador << " [label = " <<"\" Codigo Transaccion: " << AuxiliarListaDoble -> CodigoANumericoTrans << "\\lCodigo Activo: " << AuxiliarListaDoble -> CodigoANumericoActivo << "\\lUsuario Rentador: " << AuxiliarListaDoble -> UsuarioRentador << "\\lDepartamento: " << AuxiliarListaDoble -> DepartamentoRentador << "\\lEmpresa: " << AuxiliarListaDoble -> EmpresaRentador << "\\lFecha Actual: " << AuxiliarListaDoble -> FechaActual << "\\lPeriodo Renta" << AuxiliarListaDoble -> PeriodoRenta <<"\"]" <<endl;
				Temp[Contador] = "NodoLista" + to_string(Contador);
				Contador++;
				AuxiliarListaDoble = AuxiliarListaDoble -> Sgte;
			}
			while(AuxiliarListaDoble != Lista);

			for(int i = 0; i < Contador; i++)
			{
				Same = Same + Temp[i] + " ";

				if(i < Contador - 1)
				{
					Asc = Asc + Temp[i] + "->";
					Desc = Desc + Temp[Contador - i - 1] + "->";
				}
				else
				{
					Asc = Asc + Temp[i];
					Desc = Desc + Temp[Contador - i - 1];
				}
			}

			
			Asc = Asc + "->" + "A0" + "->" + "A" + to_string(Contador - 1);
			SalidaArchivo<< "{ rank = same " << Same << "}" << endl;
			SalidaArchivo<< Asc <<endl;
			SalidaArchivo<< Desc <<endl;
			SalidaArchivo<< " " <<endl;
			SalidaArchivo<< "}";
			SalidaArchivo.close();

			//Generar Imagen
			system("C:\\\"Program Files (x86)\"\\Graphviz2.38\\bin\\dot.exe  -Tpng C:\\ReportesEDD\\ReporteListaDobleCircularTransacciones.txt -o C:\\ReportesEDD\\ReporteListaDobleCircularTransacciones.png");
			//Abrir Imagen
			system("C:\\ReportesEDD\\ReporteListaDobleCircularTransacciones.png &" );
		}
		else
		{
			Color(0, 4);
			Posicionar(17, 9);
			cout<< "La Lista Circular Se Encuentra Vacia"<<endl;
		}
	}

	//Inserción

		//Insertar Transicción

	void InsertarTransaccionListaDobleCircularT(ListaDCTrans &Lista, string CodigoANumericoTrans, string CodigoANumericoActivo, string UsuarioRentador, string  EmpresaRentador, string DepartamentoRentador, string UsuarioRentado, string EmpresaRentado, string DepartamentoRentado, time_t FechaActual, int PeriodoRenta)
	{
		//Declaraciones

		//Objeto Tipo Lista Doble Circular

		ListaDCTrans AuxiliarTransicion = new ListaDobleCircularEstructura(CodigoANumericoTrans, CodigoANumericoActivo, UsuarioRentador, EmpresaRentador, DepartamentoRentador, UsuarioRentado, EmpresaRentado, DepartamentoRentado, FechaActual, PeriodoRenta);

		//Comineza Recorrido

		if(Lista == nullptr)
		{
			//Lista Vacia

			AuxiliarTransicion -> Sgte = AuxiliarTransicion;
			AuxiliarTransicion -> Ante = AuxiliarTransicion;

			Lista = AuxiliarTransicion;
		}
		else
		{
			//No Esta Vacia

			ListaDCTrans Ultimo = Lista -> Ante;

			AuxiliarTransicion -> Sgte = Lista;
			AuxiliarTransicion -> Ante = Ultimo;

			Lista -> Ante = AuxiliarTransicion;
			Ultimo -> Sgte = AuxiliarTransicion;
		}
	}



